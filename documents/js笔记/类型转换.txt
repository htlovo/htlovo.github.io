4. 数值转换 
有3 个函数可以把非数值转换为数值：Number() 、parseInt() 和parseFloat()。第一个函数，
即转型函数Number() 可以用于任何数据类型，而另两个函数则专门用于把字符串转换成数值。

Number() 函数的转换规则如下。 
   如果是Boolean值，true 和false 将分别被转换为1 和0。 
   如果是数字值，只是简单的传入和返回。 
   如果是null 值，返回0。 
   如果是undefined，返回NaN 。 
   如果是字符串，遵循下列规则： 
		如果字符串中只包含数字（包括前面带正号或负号的情况），则将其转换为十进制数值，即"1"会变成1，"123"会变成123 ，而"011" 会变成11 （注意：前导的零被忽略了）； 
		如果字符串中包含有效的浮点格式，如"1.1"，则将其转换为对应的浮点数值（同样，也会忽略前导零）； 
		如果字符串中包含有效的十六进制格式，例如"0xf"，则将其转换为相同大小的十进制整数值； 
		如果字符串是空的（不包含任何字符），则将其转换为0； 
		如果字符串中包含除上述格式之外的字符，则将其转换为NaN 。 
   如果是对象，则调用对象的valueOf()方法，然后依照前面的规则转换返回的值。如果转换的结果是NaN ，则调用对象的toString()方法，然后再次依照前面的规则转换返回的字符串值。 
根据这么多的规则使用Number() 把各种数据类型转换为数值确实有点复杂。

一元加操作符（3.5.1节将介绍）的操作与Number() 函数相同。 

由于Number() 函数在转换字符串时比较复杂而且不够合理，因此在处理整数的时候更常用的是
parseInt() 函数。

parseInt() 函数在转换字符串时，更多的是看其是否符合数值模式。它会忽略字
符串前面的空格，直至找到第一个非空格字符。如果第一个字符不是数字字符或者负号，parseInt()
就会返回NaN ；也就是说符，用parseInt() 转换空字串会返回NaN （Number() 对空字符返回0）。如
果第一个字符是数字字符，parseInt() 会继续解析第二个字符，直到解析完所有后续字符或者遇到了
一个非数字字符。例如，"1234blue"会被转换为1234，因为"blue" 会被完全忽略。类似地，"22.5"
会被转换为22，因为小数点并不是有效的数字字符。 
如果字符串中的第一个字符是数字字符，parseInt() 也能够识别出各种整数格式（即前面讨论的
十进制、八进制和十六进制数）。也就是说，如果字符串以"0x"开头且后跟数字字符，就会将其当作一
个十六进制整数；如果字符串以"0" 开头且后跟数字字符，则会将其当作一个八进制数来解析。 
为了更好地理解parseInt() 函数的转换规则，下面给出一些例子： 
 
var num1 = parseInt("1234blue");    // 1234 
var num2 = parseInt("");            // NaN 
var num3 = parseInt("0xA");         // 10（十六进制数） 
var num4 = parseInt(22.5);          // 22 
var num5 = parseInt("070");         // 56（八进制数） 
var num6 = parseInt("70");         // 70（十进制数） 
var num7 = parseInt("0xf");         // 15（十六进制数） 
 
在使用parseInt()解析像八进制字面量的字符串时，ECMAScript 3和5 存在分歧。例如： 
 
//ECMAScript 3 认为是56（八进制），ECMAScript 5认为是70（十进制） 
var num = parseInt("070"); 
 
在ECMAScript 3 JavaScript 引擎中，"070"被当成八进制字面量，因此转换后的值是十进制的56。
而在ECMAScript 5 JavaScript 引擎中，parseInt()已经不具有解析八进制值的能力，因此前导的零会
被认为无效，从而将这个值当成"70"，结果就得到十进制的 70。在 ECMAScript 5 中，即使是在非严格
模式下也会如此。 
为了消除在使用parseInt() 函数时可能导致的上述困惑，可以为这个函数提供第二个参数：转换
时使用的基数（即多少进制）。如果知道要解析的值是十六进制格式的字符串，那么指定基数16作为第
二个参数，可以保证得到正确的结果，例如： 
 
var num = parseInt("0xAF", 16);   //175 
 
实际上，如果指定了16作为第二个参数，字符串可以不带前面的"0x"，如下所示： 
 
var num1 = parseInt("AF", 16);   //175 
var num2 = parseInt("AF");     //NaN 

这个例子中的第一个转换成功了，而第二个则失败了。差别在于第一个转换传入了基数，明确告诉
parseInt() 要解析一个十六进制格式的字符串；而第二个转换发现第一个字符不是数字字符，因此就
自动终止了。 
指定基数会影响到转换的输出结果。例如： 
 
var num1 = parseInt("10", 2);      //2  （按二进制解析） 
var num2 = parseInt("10", 8);      //8  （按八进制解析） 
var num3 = parseInt("10", 10);     //10 （按十进制解析） 
var num4 = parseInt("10", 16);     //16 （按十六进制解析） 

不指定基数意味着让parseInt()决定如何解析输入的字符串，因此为了避免错误的解析，我们建
议无论在什么情况下都明确指定基数。 
多数情况下，我们要解析的都是十进制数值，因此始终将10作为第二个参数是
非常必要的。 

与parseInt() 函数类似，parseFloat()也是从第一个字符（位置0）开始解析每个字符。而且
也是一直解析到字符串末尾，或者解析到遇见一个无效的浮点数字字符为止。也就是说，字符串中的第
一个小数点是有效的，而第二个小数点就是无效的了，因此它后面的字符串将被忽略。举例来说，
"22.34.5"将会被转换为22.34。 
除了第一个小数点有效之外，parseFloat() 与parseInt() 的第二个区别在于它始终都会忽略前导
的零。parseFloat() 可以识别前面讨论过的所有浮点数值格式，也包括十进制整数格式。但十六进制格
式的字符串则始终会被转换成 0。由于 parseFloat() 只解析十进制值，因此它没有用第二个参数指定基
数的用法。最后还要注意一点：如果字符串包含的是一个可解析为整数的数（没有小数点，或者小数点后
都是零），parseFloat() 会返回整数。以下是使用 parseFloat() 转换数值的几个典型示例。 
 
var num1 = parseFloat("1234blue");         //1234  （整数） 
var num2 = parseFloat("0xA");               //0 
var num3 = parseFloat("22.5");              //22.5 
var num4 = parseFloat("22.34.5");           //22.34 
var num5 = parseFloat("0908.5");           //908.5 
var num6 = parseFloat("3.125e7");           //31250000


3. 转换为字符串 

要把一个值转换为一个字符串有两种方式。第一种是使用几乎每个值都有的 toString()方法（第
5 章将讨论这个方法的特点）。这个方法唯一要做的就是返回相应值的字符串表现。来看下面的例子： 
 
var age = 11; 
var ageAsString = age.toString();         // 字符串"11" 
var found = true; 
var foundAsString = found.toString();     // 字符串"true" 
 
StringExample01.htm 
数值、布尔值、对象和字符串值（没错，每个字符串也都有一个 toString()方法，该方法返回字
符串的一个副本）都有toString()方法。但null 和undefined 值没有这个方法。 
多数情况下，调用 toString() 方法不必传递参数。但是，在调用数值的 toString() 方法时，可
以传递一个参数：输出数值的基数。默认情况下，toString() 方法以十进制格式返回数值的字符串表
示。而通过传递基数，toString() 可以输出以二进制、八进制、十六进制，乃至其他任意有效进制格
式表示的字符串值。下面给出几个例子： 
 
var num = 10; 
alert(num.toString());         // "10" 
alert(num.toString(2));        // "1010" 
alert(num.toString(8));        // "12" 
alert(num.toString(10));       // "10" 
alert(num.toString(16));       // "a" 

通过这个例子可以看出，通过指定基数，toString()方法会改变输出的值。而数值 10根据基数的
不同，可以在输出时被转换为不同的数值格式。注意，默认的（没有参数的）输出值与指定基数10时
的输出值相同。 
在不知道要转换的值是不是null 或undefined 的情况下，还可以使用转型函数 String() ，这个
函数能够将任何类型的值转换为字符串。String() 函数遵循下列转换规则： 
   如果值有toString()方法，则调用该方法（没有参数）并返回相应的结果； 
   如果值是null，则返回"null" ； 
   如果值是undefined，则返回"undefined"。 
下面再看几个例子： 
 
var value1 = 10; 
var value2 = true; 
var value3 = null; 
var value4; 
 
alert(String(value1));     // "10" 
alert(String(value2));     // "true" 
alert(String(value3));     // "null" 
alert(String(value4));     // "undefined" 

这里先后转换了4 个值：数值、布尔值、null 和undefined。数值和布尔值的转换结果与调用
toString() 方法得到的结果相同。因为 null 和undefined 没有toString() 方法，所以 String()
函数就返回了这两个值的字面量。 
要把某个值转换为字符串，可以使用加号操作符（3.5 节讨论）把它与一个字符
串（""）加在一起。


数据类型  转换为true的值  转换为false的值 
Boolean  true false 
String  任何非空字符串  ""（空字符串） 
Number  任何非零数字值（包括无穷大） 0和NaN （参见本章后面有关NaN 的内容） 
Object  任何对象 
null 
Undefined  n/a undefined