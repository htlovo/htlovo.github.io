关键字（*为第5版新加的）：
	break		do			instanceof	typeof
	case		else		new			var
	catch		finally		return		void
	continue	for			switch		while
	debugger*	function	this		with
	default		if			throw
	delete		in			try
保留字（第3版）：
	abstract	enum		int			short
	boolean		export		interface	static
	byte		extends		long		super
	char		final		native		synchronized
	class		float		package		throws
	const		goto		private		transient
	debugger	implements	protected	volatile
	double		import		public
保留字（第5版非严格模式）：
	class		enum		extends		super
	const		export		import
保留字（第5版严格模式）：
	implements	package		public
	interface	private		static
	let			protected	yield	+第5版非严格模式
第5版还对eval和arguments施加了限制，严格模式下也不能作为标识符或属性名。
总结：建议做标识符的单词：关键字 + 保留字（第3版） + let、yield + eval、arguments

数据类型：
	简单数据类型也称基本数据类型Undefined,Null,Boolean,Number,String
	复杂数据类型Object
typeof操作符可能返回的字符串：
	"undefined"		这个值未定义或未初始化；
	"boolean"		这个值是布尔值；
	"string"		这个值是字符串；
	"number"		这个值是数值；
	"object"		这个值是对象或null；
	"function"		这个值是函数；
Undefined数据类型，只有一个值undefined
	在使用var声明变量但未对其加以初始化时，这个变量的值就是undefined
Null数据类型，只有一个值null
	空对象指针
Boolean类型，有两个字面值true和false
	Boolean()函数转换数据类型的规则：（n/a或N/A，是not applicable的缩写，意思是不适用）
		数据类型：		转换为true的值					转换为false的值
		Boolean			true							false
		String			任何非空字符串					""（空字符串）
		Number			任何非零数字值（包括无穷大）	0或NaN
		Object			任何对象						null
		Undefined		n/a								undefined
Number类型
	不要测试某个特定的浮点数值
	最小数值Number.MIN_VALUE在大多数浏览器中是5e-324
		最大数值Number.MAX_VALUE在大多数浏览器中是1.7976931348623157e+308
		超过范围值负的转为-Infinity，正的转为Infinity。
	Number.NEGATIVE_INFINITY的值为-Infinity，Number.POSITIVE_INFINITY=Infinity
	NaN，0/0会返回NaN,任何涉及NaN的操作都会返回NaN，NaN与任何值包括NaN本身都不相等，
		isNaN()函数当接收到的值不能转化成数值时，值为true
	数值转换：
		Number()函数即转型函数可以用于任何数据类型，如果是
			Boolean值，true和false分别转换为1和0
			数字值，只是简单的传入和返回
			null返回0
			undefined返回NaN
			字符串，如果字符串
				中只包含数字（包括前面带正号或负号的情况）则将其转换为十进制数值（前导零会被忽略）
				中包含有效的浮点格式，则将其转换为对应的浮点数值
				中包含有效的十六进制格式，则转换为相同大小的十进制整数值
				是空的，转换为0
				包含上述格式值为的字符，转换为NaN
			对象，调用valueOf()方法，然后依照前面的规则转换返回的值。如果结果是NaN，则调用toString()方法，在此依照前面的规则转换
		parseInt()函数和parseFloat()函数只可以转换字符串
String类型
	toString()方法和String()方法
Object类型

操作符：
	一元操作符：递增和递减操作符（值++）（值--）（++值）（--值），一元加和减操作符（+值）和（-值）
	位操作符：按位非（~值）操作数的负值减一，按位与（值&值）,按位或（值|值），按位异或（值^值），左移（值<<位数）,有符号的右移（值>>位数），无符号的右移（值>>>位数）
	布尔操作符：逻辑非（!值），逻辑与（值&&值）（短路操作符），逻辑或（值||值）（短路操作符）
		与，或，如果有一个操作符不是布尔值，就不一定返回布尔值
	乘性操作符：乘法（值*值）



























参考资料JavaScript高级程序设计（第3版）