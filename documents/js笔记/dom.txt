DOM1
10.1.1   Node类型 
	DOM1 级定义了一个Node接口，该接口将由DOM中的所有节点类型实现。这个Node接口在JavaScript 中是作为Node 类型实现的；除了IE 之外，在其他所有浏览器中都可以访问到这个类型。JavaScript中的所有节点类型都继承自Node类型，因此所有节点类型都共享着相同的基本属性和方法。 

	nodeType 属性，用于表明节点的类型。节点类型由在 Node 类型中定义的下列12个数值常量来表示，任何节点类型必居其一：
	Node.ELEMENT_NODE(1)；
	Node.ATTRIBUTE_NODE(2)；
	Node.TEXT_NODE(3)；
	Node.CDATA_SECTION_NODE (4)；
	Node.ENTITY_REFERENCE_NODE(5)；
	Node.ENTITY_NODE(6)；
	Node.PROCESSING_INSTRUCTION_NODE(7)；
	Node.COMMENT_NODE(8)；
	Node.DOCUMENT_NODE (9)；
	Node.DOCUMENT_TYPE_NODE (10) ；
	Node.DOCUMENT_FRAGMENT_NODE(11) ；
	Node.NOTATION_NODE (12) 。 

	1. nodeName 和nodeValue 属性这两个属性的值完全取决于节点的类型。 
	if (someNode.nodeType == 1){ 
	    value = someNode.nodeName;    //nodeName 的值是元素的标签名 
	}  
	对于元素节点，nodeName 中保存的始终都是元素的标签名，而nodeValue 的值则始终为null。 

	2.节点关系

	childNodes 属性，其中保存着一个 NodeList 对象。NodeList 是一种类数组对象，用于保存一组有序的节点，可以通过位置来访问这些节点。请注意，虽然可以通过方括号语法来访问NodeList 的值，而且这个对象也有 length 属性，但它并不是 Array 的实例。NodeList 对象的独特之处在于，它实际上是基于DOM结构动态执行查询的结果，因此DOM结构的变化能够自动反映在NodeList对象中。可以通过方括号，也可以使用item()方法访问保存在NodeList 中的节点

	parentNode 属性，该属性指向文档树中的父节点。包含在childNodes 列表中的所有节点都具有相同的父节点，因此它们的 parentNode 属性都指向同一个节点。此外，包含在childNodes 列表中的每个节点相互之间都是同胞节点。

	previousSibling和nextSibling 属性，可以访问同一列表中的其他节点。列表中第一个节点的previousSibling 属性值为 null，而列表中最后一个节点的 nextSibling 属性的值同样也为 null

	firstChild 和lastChild属性分别指向其childNodes 列表中的第一个和最后一个节点。其中，someNode.firstChild 的值始终等于 someNode.childNodes[0]，而someNode.lastChild 的值始终等于someNode. childNodes [someNode.childNodes.length-1]。在只有一个子节点的情况下，firstChild 和lastChild 指向同一个节点。

	hasChildNodes()方法，这个方法在节点包含一或多个子节点的情况下返回true

	ownerDocument属性指向表示整个文档的文档节点。

	3.操作节点

	appendChild()方法
	用于向childNodes列表的末尾添加一个节点。返回新增的节点

	insertBefore()方法
	接受两个参数：要插入的节点和作为参照的节点。插入节点后，被插入的节点会变成参照节点的前一个同胞节点（previousSibling），同时被方法返回。如果参照节点是null，则insertBefore()与appendChild()执行相同的操作

	replaceChild()方法
	接受的两个参数是：要插入的节点和要替换的节点。要替换的节点将由这个方法返回并从文档树中被移除，同时由要插入的节点占据其位置。

	removeChild() 方法
	接受一个参数，即要移除的节点。被移除的节点将成为方法的返回值与使用replaceChild()方法一样，通过 removeChild()移除的节点仍然为文档所有，只不过在文档中已经没有了自己的位置。

	4.其他方法

	cloneNode() ，用于创建调用这个方法的节点的一个完全相同的副本。接受一个布尔值参数，表示是否执行深复制。复制后返回的节点副本属于文档所有，但并没有为它指定父节点

	normalize()，处理文档树中的文本节点。由于解析器的实现或DOM操作等原因，可能会出现文本节点不包含文本，或者接连出现两个文本节点的情况。当在某个节点上调用这个方法时，就会在该节点的后代节点中查找上述两种情况。如果找到了空文本节点，则删除它；如果找到相邻的文本节点，则将它们合并为一个文本节点。

10.1.2   Document 类型 
	JavaScript 通过Document 类型表示文档。在浏览器中，document 对象是HTMLDocument（继承自Document 类型）的一个实例，表示整个 HTML 页面。而且，document 对象是window 对象的一个属性，因此可以将其作为全局对象来访问。Document 节点具有下列特征： 
	nodeType 的值为9	
	nodeName 的值为"#document" 	
	nodeValue 的值为null	
	parentNode 的值为null	
	ownerDocument 的值为  null	
	其子节点可能是一个DocumentType（最多一个）、Element（最多一个）、ProcessingInstruction或Comment。

	1. 文档的子节点
	虽然DOM标准规定Document节点的子节点可以是DocumentType、Element、ProcessingIn-struction 或Comment，但还有两个内置的访问其子节点的快捷方式。

	第一个就是documentElement属性，该属性始终指向HTML 页面中的<html>元素，与firstChild 和childNodes[0] 的值相同，都指向<html>元素。
	
	作为 HTMLDocument的实例，document 对象还有一个 body 属性，直接指向<body> 元素。

	2. 文档信息 
	作为HTMLDocument的一个实例，document 对象还有一些标准的Document对象所没有的属性。这些属性提供了document 对象所表现的网页的一些信息。

	title 属性，包含着<title>元素中的文本——修改title 属性的值不会改变<title>元素。
	URL 属性中包含页面完整的URL （即地址栏中显示的URL ）
	domain属性中只包含页面的域名
	referrer属性中则保存着链接到当前页面的那个页面的URL。在没有来源页面的情况下，referrer 属性中可能会包含空字符串。

	3. 查找元素
	getElementById()方法接收一个参数：要取得的元素的ID。如果找到相应的元素则返回该元素，如果不存在带有相应 ID的元素，则返回 null。

	getElementsByTagName()方法接受一个参数，即要取得元素的标签名，而返回的是包含零或多个元素的NodeList 。在 HTML文档中，这个方法会返回一个HTMLCollection 对象，作为一个“动态”集合，该对象与NodeList 非常类似。对HTMLCollection而言，我们可以向方括号中传入数值或字符串形式的索引值。在后台，对数值索引就会调用item()，而对字符串索引就会调用namedItem() 。

	getElementsByName()方法会返回带有给定name 特性的所有元素。

	4. 特殊集合 
	除了属性和方法，document对象还有一些特殊的集合。这些集合都是HTMLCollection对象，为访问文档常用的部分提供了快捷方式，包括：
	
	document.anchors，包含文档中所有带name特性的<a>元素；
	document.applets，包含文档中所有的<applet>元素，因为不再推荐使用<applet>元素，所以这个集合已经不建议使用了；
	document.forms，包含文档中所有的<form>元素，与document.getElementsByTagName("form")得到的结果相同；
	document.images，包含文档中所有的<img>元素，与document.getElementsByTagName("img")得到的结果相同；
	document.links，包含文档中所有带href 特性的<a> 元素。 
	
	这个特殊集合始终都可以通过HTMLDocument对象访问到，而且，与HTMLCollection 对象类似，集合中的项也会随着当前文档内容的更新而更新。 

	5. DOM 一致性检测
	document.implementation属性。DOM1级只为document.implementation规定了一个方法，即hasFeature()。这个方法接受两个参数：要检测的DOM功能的名称及版本号。如果浏览器支持给定名称和版本的功能，则该方法返回true，
 
	功  能  版   本   号  说  明 
	Core	1.0、2.0、3.0	基本的DOM，用于描述表现文档的节点树
	XML		1.0、2.0、3.0	Core的XML扩展，添加了对CDATA、处理指令及实体的支持
	HTML	1.0、2.0	XML的HTML扩展，添加了对HTML特有元素及实体的支持
	Views	2.0			基于某些样式完成文档的格式化
	StyleSheets	2.0		将样式表关联到文档
	CSS		2.0			对层叠样式表1级的支持
	CSS2	2.0			对层叠样式表2级的支持
	Events	2.0，3.0	常规的DOM事件
	UIEvents	2.0，3.0	用户界面事件
	MouseEvents	2.0，3.0	由鼠标引发的事件（click、mouseover等）
	MutationEvents	2.0，3.0	DOM树变化时引发的事件
	HTMLEvents	2.0		HTML4.01事件
	Range	2.0			用于操作DOM树中某个范围的对象和方法
	Traversal	2.0		遍历DOM树的方法
	LS		3.0			文件与DOM树之间的同步加载和保存
	LS-Async	3.0		文件与DOM树之间的异步加载和保存
	Validation	3.0		在确保有效的前提下修改DOM树的方法

	事实上，要想让 hasFearture() 方法针对所有值都返回true 很容易，但返回 true有时候也不意味着实现与规范一致。我们建议多数情况下，在使用DOM的某些特殊的功能之前，最好除了检测hasFeature()之外，还同时使用能力检测。 

	6. 文档写入
	有一个document对象的将输出流写入到网页中的能力体现在下列4个方法中：write()、writeln()、open() 和close()。其中，write()和writeln()方法都接受一个字符串参数，即要写入到输出流中的文本。write()会原样写入，而writeln()则会在字符串的末尾添加一个换行符（\n）。

10.1.3   Element类型 
	Element类型用于表现 XML或HTML元素，提供了对元素标签名、子节点及特性的访问。Element节点具有以下特征： 
	nodeType 的值为1； 
	nodeName 的值为元素的标签名； 
	nodeValue 的值为null； 
	parentNode 可能是Document 或Element； 
	
	其子节点可能是Element、Text、Comment、ProcessingInstruction、CDATASection或EntityReference 。要访问元素的标签名，可以使用nodeName属性，也可以使用tagName属性；这两个属性会返回相同的值

	1. HTML 元素
	所有HTML 元素都由HTMLElement类型表示，不是直接通过这个类型，也是通过它的子类型来表示。HTMLElement类型直接继承自Element并添加了一些属性。添加的这些属性分别对应于每个HTML元素中都存在的下列标准特性。
	id，元素在文档中的唯一标识符。
	title ，有关元素的附加说明信息，一般通过工具提示条显示出来。 
	lang，元素内容的语言代码，很少使用。
	dir，语言的方向，值为"ltr"（left-to-right，从左至右）或"rtl"（right-to-left ，从右至左），也很少使用。 
	className，与元素的class特性对应，即为元素指定的CSS类。没有将这个属性命名为class ，是因为class 是ECMAScript的保留字

	所有 HTML 元素都是由HTMLElement 或者其更具体的子类型来表示的。下表列出了所有HTML 元素以及与之关联的类型（以斜体印刷的元素表示已经不推荐使用了）。
	
	2. 取得特性
	getAttribute()的特性名与实际的特性名相同。因此要想得到class特性值，应该传入"class"而不是"className"，后者只有在通过对象属性访问特性时才用。如果给定名称的特性不存在，getAttribute()返回null。 

	3. 设置特性 
	setAttribute()方法接受两个参数：要设置的特性名和值。如果特性已经存在，setAttribute()会以指定的值替换现有的值；如果特性不存在，setAttribute()则创建该属性并设置相应的值。
	
	removeAttribute()，这个方法用于彻底删除元素的特性。

	4. attributes 属性 
	Element类型是使用attributes属性的唯一一个DOM节点类型。attributes属性中包含一个NamedNodeMap，与NodeList 类似，也是一个“动态”的集合。元素的每一个特性都由一个Attr 节点表示，每个节点都保存在NamedNodeMap对象中。NamedNodeMap对象拥有下列方法。 
	getNamedItem(name)：返回nodeName 属性等于name 的节点； 
	removeNamedItem (name)：从列表中移除nodeName 属性等于name 的节点； 
	setNamedItem(node)：向列表中添加节点，以节点的nodeName 属性为索引； 
	item(pos) ：返回位于数字pos 位置处的节点。 
	
	attributes 属性中包含一系列节点，每个节点的nodeName 就是特性的名称，而节点的 nodeValue就是特性的值。

	5. 创建元素 
	document.createElement()方法可以创建新元素。这个方法只接受一个参数，即要创建元素的标签名。

10.1.4   Text类型 
	文本节点由Text 类型表示，包含的是可以照字面解释的纯文本内容。纯文本中可以包含转义后的HTML 字符，但不能包含HTML 代码。
	Text 节点具有以下特征：
	nodeType 的值为3； 
	nodeName 的值为"#text"； 
	nodeValue 的值为节点所包含的文本； 
	parentNode 是一个Element； 
	不支持（没有）子节点。 

	可以通过nodeValue 属性或data 属性访问Text 节点中包含的文本，这两个属性中包含的值相同。对 nodeValue 的修改也会通过data 反映出来，反之亦然
	使用下列方法可以操作节点中的文本。
	appendData(text)：将text 添加到节点的末尾。 
	deleteData(offset, count )：从offset 指定的位置开始删除count个字符。 
	insertData(offset, text) ：在offset 指定的位置插入text。 
	replaceData(offset, count , text)：用 text 替换从offset 指定的位置开始到offset+ count 为止处的文本。 
	splitText( offset)：从offset 指定的位置将当前文本节点分成两个文本节点。 
	substringData(offset, count )：提取从offset 指定的位置开始到offset+count 为止处的字符串。

	文本节点还有一个 length 属性，保存着节点中字符的数目。而且，nodeValue.length 和data.length 中也保存着同样的值。在默认情况下，每个可以包含内容的元素最多只能有一个文本节点，而且必须确实有内容存在。

	1. 创建文本节点 
	可以使用 document.createTextNode()创建新文本节点，这个方法接受一个参数——要插入节点中的文本。

	2. 规范化文本节点
	normalize()这个方法是由Node 类型定义的（因而在所有节点类型中都存在）。如果在一个包含两个或多个文本节点的父元素上调用normalize() 方法，则会将所有文本节点合并成一个节点，结果节点的nodeValue 等于将合并前每个文本节点的nodeValue 值拼接起来的值。

	3. 分割文本节点 
	Text 类型提供了一个作用与normalize()相反的方法：splitText() 方法会将一个文本节点分成两个文本节点，即按照指定的位置分割nodeValue 值。原来的文本节点将包含从开始到指定位置之前的内容，新文本节点将包含剩下的文本。这个方法会返回一个新文本节点，原节点的parentNode 相同。

10.1.5   Comment类型 
	注释在DOM中是通过Comment类型来表示的。Comment节点具有下列特征： 
	nodeType 的值为8；
	nodeName 的值为"#comment"；
	nodeValue 的值是注释的内容；
	parentNode 可能是Document 或Element；
	不支持（没有）子节点。 

	Comment类型与Text 类型继承自相同的基类，因此它拥有除splitText() 之外的所有字符串操作方法。与Text 类型相似，也可以通过nodeValue 或data 属性来取得注释的内容。 

10.1.6   CDATASection类型 
	CDATASection 类型只针对基于XML的文档，表示的是CDATA 区域。与Comment 类似，CDATASection 类型继承自Text 类型，因此拥有除splitText() 之外的所有字符串操作方法。
	CDATASection节点具有下列特征： 
	nodeType 的值为4； 
	nodeName 的值为"#cdata-section" ； 
	nodeValue 的值是CDATA区域中的内容； 
	parentNode 可能是Document 或Element； 
	不支持（没有）子节点。

	CDATA区域只会出现在XML文档中，因此多数浏览器都会把CDATA区域错误地解析为Comment或Element。

10.1.7   DocumentType类型 
	DocumentType类型在Web 浏览器中并不常用，Document-Type 包含着与文档的doctype有关的所有信息，
	它具有下列特征： 
	nodeType 的值为10； 
	nodeName 的值为doctype的名称； 
	nodeValue 的值为null； 
	parentNode 是Document ； 
	不支持（没有）子节点。 

	在DOM1 级中，DocumentType 对象不能动态创建，而只能通过解析文档代码的方式来创建。支
	持它的浏览器会把 DocumentType 对象保存在 document.doctype 中。DOM1 级描述了
	DocumentType对象的3 个属性：
	name 表示文档类型的名称；
	entities 是由文档类型描述的实体的NamedNodeMap对象；
	notations 是由文档类型描述的符号的NamedNodeMap对象。

	通常，浏览器中的文档使用的都是HTML 或XHTML 文档类型，因而 entities和notations 都是空列表（列表中的项来自行内文档类型声明）。

10.1.8   DocumentFragment类型 
	在所有节点类型中，只有DocumentFragment 在文档中没有对应的标记。DOM 规定文档片段（document fragment ）是一种“轻量级”的文档，可以包含和控制节点，但不会像完整的文档那样占用额外的资源。
	DocumentFragment 节点具有下列特征： 
	nodeType 的值为11 ； 
	nodeName 的值为"#document-fragment"； 
	nodeValue 的值为null； 
	parentNode 的值为null； 
	
	子节点可以是Element、ProcessingInstruction 、Comment、Text、CDATASection 或EntityReference 。 
	虽然不能把文档片段直接添加到文档中，但可以将它作为一个“仓库”来使用，即可以在里面保存将来可能会添加到文档中的节点。document.createDocumentFragment()方法可以创建文档片段，
 
	文档片段继承了Node 的所有方法，通常用于执行那些针对文档的DOM操作。如果将文档中的节点添加到文档片段中，就会从文档树中移除该节点，也不会从浏览器中再看到该节点。添加到文档片段中的新节点同样也不属于文档树。可以通过 appendChild() 或insertBefore()将文档片段中内容添加到文档中。在将文档片段作为参数传递给这两个方法时，实际上只会将文档片段的所有子节点添加到相应位置上；文档片段本身永远不会成为文档树的一部分。

10.1.9   Attr类型 
	元素的特性在DOM中以Attr 类型来表示。在所有浏览器中都可以访问 Attr 类型的构造函数和原型。从技术角度讲，特性就是存在于元素的attributes 属性中的节点。
	特性节点具有下列特征： 
	nodeType 的值为2； 
	nodeName 的值是特性的名称； 
	nodeValue 的值是特性的值； 
	parentNode 的值为null； 
	在HTML 中不支持（没有）子节点； 
	在XML中子节点可以是Text 或EntityReference 。 

	尽管它们也是节点，但特性却不被认为是DOM文档树的一部分。开发人员最常使用的是getAt-tribute()、setAttribute()和remveAttribute()方法，很少直接引用特性节点。 
	Attr 对象有3 个属性：
	name 是特性名称（与 nodeName 的值相同）
	value是特性的值（与nodeValue 的值相同）
	specified 是一个布尔值，用以区别特性是在代码中指定的，还是默认的。 

	document.createAttribute()并传入特性的名称可以创建新的特性节点。
	要为元素添加align 特性，可以使用下列代码： 
 
	var attr = document.createAttribute("align"); 
	attr.value = "left"; 
	element.setAttributeNode(attr); 
	alert(element.attributes["align"].value);       //"left" 
	alert(element.getAttributeNode("align").value); //"left" 
	alert(element.getAttribute("align"));           //"left" 

	在调用createAttribute()时已经为name 属性赋了值，后面就不必给它赋值了。之后，又把value 属性的值设置为"left" 。为了将新创建的特性添加到元素中，必须使用元素的setAttributeNode() 方法。添加特性之后，可以通过下列任何方式访问该特性：attributes属性、getAttributeNode() 方法以及getAttribute()方法。其中，attributes和getAttributeNode() 都会返回对应特性的Attr 节点，而getAttribute()则只返回特性的值。 我们并不建议直接访问特性节点。使用 getAttribute() 、setAttribute()和removeAttribute()方法远比操作特性节点更为方便。



10.2   DOM操作技术





